{"version":3,"sources":["components/Modal/Modal.tsx","components/Modal/utils.ts","components/App/App.tsx","index.tsx"],"names":["Modal","active","setActive","useState","checked","setChecked","taxElem","setTaxElem","inputErr","setInputErr","rubValue","setRubValue","whatDecrease","setWhatDecrease","ref","useRef","useEffect","current","setSelectionRange","value","length","className","onClick","e","stopPropagation","htmlFor","type","id","name","placeholder","onChange","str","regexp1","match","rubSign","target","split","arr","taxDeducPerYear","parseInt","join","push","Array","fill","divTux","Math","trunc","modTux","i","taxDeduction","map","elem","index","position","item","handleOnChange","toLocaleString","App","modalActive","setModalActive","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be1b1320.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\r\nimport {handleOnChange, taxDeduction, rubSign} from './utils';\r\ninterface modalProps {\r\n    active: boolean;\r\n    setActive: Function;\r\n}\r\nconst Modal: React.FC<modalProps> = ({active, setActive}) => {\r\n    // checkbox managment\r\n    const [checked, setChecked] = useState<boolean[]>([]); // checking - was some checkbox clicked or not\r\n    const [taxElem, setTaxElem] = useState<number[]>([]); // an array of tax for every year\r\n    // checkbox managment\r\n    const [inputErr, setInputErr] = useState<boolean>(false) // if the input is empty the user will see the error message\r\n    const [rubValue, setRubValue] = useState<string>(\"\"); //input value\r\n    \r\n    const [whatDecrease, setWhatDecrease] = useState<boolean>(true); // toggle of buttons \"Платеж\" and \"Срок\"\r\n    const ref = useRef<HTMLInputElement>(null);\r\n    useEffect(() => {\r\n        ref.current?.setSelectionRange(ref.current?.value.length - 2, ref.current?.value.length - 2);\r\n    }, [rubValue]);\r\n    return (\r\n        <div className={active ? \"modal active\" : \"modal\"} onClick={() => {\r\n            setActive(false);\r\n            setTaxElem([]);\r\n            setChecked([]);\r\n            setRubValue(\"\");\r\n        }}>\r\n            <div className=\"modal__wrapper\">\r\n                <div className={active ? \"modal__content active\" : \"modal__content\"} onClick={(e) => e.stopPropagation()}>\r\n                    <button className=\"modal__close\" onClick={() => {\r\n                        setActive(false);\r\n                        setTaxElem([]);\r\n                        setChecked([]);\r\n                        setRubValue(\"\");\r\n                    }}></button>\r\n                    <h1 className=\"modal__title\">Налоговый вычет</h1>\r\n                    <p className=\"modal__text\">\r\n                        Используйте налоговый вычет чтобы погасить ипотеку досрочно. \r\n                        Размер налогового вычета составляет не более 13% от своего официального годового дохода.\r\n                    </p>\r\n                    <div className=\"modal__rubBlock\">\r\n                        <label htmlFor=\"modal__rub\" className=\"modal__labelRub\">Ваша зарплата в месяц</label>\r\n                        <input \r\n                            ref={ref}\r\n                            type=\"text\"\r\n                            id=\"modal__rub\"\r\n                            className={inputErr ? \"modal__inputRub modal__inputRub--error\" : \"modal__inputRub\"}\r\n                            name=\"rub\"\r\n                            placeholder=\"Введите данные\"\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => rubSign(e.target.value, setRubValue)}\r\n                            value={rubValue}\r\n                        />\r\n                        <p className={inputErr ? \"modal__error modal__error--true\" \r\n                                : \"modal__error modal__error--false\"}>\r\n                            Поле обязательно для заполнения\r\n                        </p>\r\n                    </div>\r\n                    <button className=\"modal__calc\" onClick={() => {\r\n                        if(rubValue === '') {\r\n                            setInputErr(true);\r\n                        } else {\r\n                            if (inputErr) setInputErr(false);\r\n                            setTaxElem(taxDeduction(rubValue, setChecked));\r\n                        }\r\n                        }}>\r\n                            Рассчитать\r\n                    </button>\r\n                    {taxElem.length === 0 ?\r\n                        <></>\r\n                        :\r\n                        <div className=\"modal__sum\">\r\n                            <p className=\"modal__sumTitle\">Итого можете внести в качестве досрочных:</p>\r\n                            {taxElem.map((elem, index) => {\r\n                                return (\r\n                                    <div key={index} className=\"modal__checkbox-line\">\r\n                                        <input \r\n                                            type=\"checkbox\"\r\n                                            id={`modal__checkbox${index + 1}`}\r\n                                            className=\"modal__checkbox\"\r\n                                            name={`year: ${index + 1}`}\r\n                                            value={index+1}\r\n                                            onChange={() => handleOnChange(index, checked, setChecked)}\r\n                                            checked={checked[index]}\r\n                                        />\r\n                                        <label htmlFor={`modal__checkbox${index + 1}`}>\r\n                                            {elem.toLocaleString()} рублей<span className=\"modal__checkbox--span\">&#160;в {index + 1}-ый год</span>\r\n                                        </label>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    }\r\n                    <div className=\"modal__decrease\">\r\n                        <p className=\"modal__decreaseText\">Что уменшьшаем?</p>\r\n                        <div className=\"modal__decreaseBlock\">\r\n                            <button \r\n                                onClick={() => setWhatDecrease(true)} \r\n                                className={whatDecrease ? \"modal__decreaseBtn modal__decreaseBtn--active\" :\r\n                                    \"modal__decreaseBtn\"}\r\n                                >\r\n                                Платёж\r\n                            </button>\r\n                            <button \r\n                                onClick={() => setWhatDecrease(false)} \r\n                                className={whatDecrease ? \"modal__decreaseBtn\" :\r\n                                    \"modal__decreaseBtn modal__decreaseBtn--active\"}\r\n                                >\r\n                                Срок\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <button className=\"modal__add\">Добавить</button>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","export const handleOnChange = (position: number, checked: boolean[], setChecked: Function) => {\r\n    const updatedCheckedState = checked.map((item, index) =>\r\n        index === position ? !item : item\r\n    );\r\n    setChecked(updatedCheckedState);\r\n};\r\nexport const taxDeduction = (str: string, setChecked: Function): number[] => {\r\n    if (str.split('')[0] === \"0\") return [];\r\n    const regexp1 = /\\d+/;\r\n    const arr: number[] = [];\r\n    const taxDeducPerYear: number = parseInt(str.match(regexp1)!.join(\"\"))* 12 * 0.13;\r\n    if (taxDeducPerYear >= 260000) {\r\n        arr.push(260000);\r\n        setChecked(new Array(arr.length).fill(false));\r\n        return arr;\r\n    }\r\n    const divTux: number = Math.trunc(260000 / taxDeducPerYear);\r\n    const modTux: number = (260000 % taxDeducPerYear !== 0) ? 260000 - (taxDeducPerYear * divTux) : 0;\r\n    for (let i = 0; i < divTux; i++) {\r\n        arr.push(taxDeducPerYear);\r\n    }\r\n    if (modTux !== 0) arr.push(modTux);\r\n    setChecked(new Array(arr.length).fill(false));\r\n    return arr;\r\n};\r\nexport const rubSign = (str: string, setRubValue: Function)=> {\r\n    const regexp1 = /\\d+/;\r\n    if (str.match(regexp1) === null) {\r\n        setRubValue(\"\")\r\n    } else {\r\n        setRubValue(`${str.match(regexp1)} ₽`)\r\n    }\r\n};","import React, {useState} from 'react';\nimport Modal from '../Modal/Modal';\nimport './App.scss';\n\nconst App = () => {\n  const [modalActive, setModalActive] = useState<boolean>(false);\n  return (\n    <div className=\"main\">\n      <button className=\"main__button\" onClick={() => setModalActive(true)}>Налоговый вычет</button>\n      <Modal active={modalActive} setActive={setModalActive} />\n    </div>\n  )\n}\n\nexport default App\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}